openapi: "3.0.3"
info:
  title: E-Commerce Retail Inventory Management System API
  description: API for managing inventory, products, users, categories, and stock movements with role-based access control
  version: "1.0.0"
servers:
  - url: http://localhost:4000/api
    description: Development server

# ========================================================================================
# API ORGANIZATION GUIDELINES
# ========================================================================================
#
# This OpenAPI specification follows a structured organization for better maintainability:
#
# 1. ENDPOINT ORDERING PRINCIPLES:
#    - Authentication endpoints come FIRST (foundational for API access)
#    - Resource endpoints follow ALPHABETICAL order for easy discovery
#    - Current alphabetical order: access-permissions, audit-logs, categories, products, roles, stock-movements, users
#
# 2. CRUD OPERATION ORDER (for each resource):
#    - GET /{resource}          - List/Collection endpoint
#    - POST /{resource}         - Create new resource (if applicable)
#    - GET /{resource}/{id}     - Get single resource by ID
#    - PUT/PATCH /{resource}/{id} - Update resource (if applicable)
#    - DELETE /{resource}/{id}  - Delete resource (if applicable)
#
# 3. NESTED/SUB-RESOURCE ENDPOINTS:
#    - Always placed AFTER the main CRUD operations for the parent resource
#    - Examples: /{resource}/{id}/images, /{resource}/{id}/batches
#
# 4. MAINTENANCE TIPS:
#    - When adding new resources: Insert in alphabetical position
#    - When adding new endpoints: Follow CRUD order within resource section
#    - Use consistent parameter naming and response schemas
#    - Keep related endpoints grouped together with clear section comments
#    - Update this header comment when organization changes
#
# ========================================================================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Common schemas
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field that caused the error
              message:
                type: string
                description: Error message

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
        total:
          type: integer
        totalPages:
          type: integer

    # Auth schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 100
          description: User email address
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: User password

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User full name
        email:
          type: string
          format: email
          maxLength: 100
          description: User email address
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: User password
        phone:
          type: string
          pattern: '^(\\+62|62|0)[8-9][0-9]{7,11}$'
          maxLength: 20
          description: Indonesian phone number format
        sex:
          type: string
          enum: [MALE, FEMALE]
          description: User gender

    AuthResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token
            user:
              $ref: "#/components/schemas/User"
        message:
          type: string

    RefreshResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: New JWT access token
        message:
          type: string

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User unique identifier
        name:
          type: string
          maxLength: 100
          description: User full name
        email:
          type: string
          format: email
          maxLength: 100
          description: User email address
        phone:
          type: string
          maxLength: 20
          description: User phone number
        sex:
          type: string
          enum: [MALE, FEMALE]
          description: User gender
        isVerified:
          type: boolean
          description: Whether user email is verified
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp
        role:
          type: object
          properties:
            id:
              type: string
              description: Role ID
            name:
              type: string
              description: Role name
        image:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Image ID
            url:
              type: string
              description: Image URL
            thumbnailUrl:
              type: string
              description: Thumbnail image URL
            altText:
              type: string
              description: Image alt text

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: User full name
        email:
          type: string
          format: email
          maxLength: 100
          description: User email address
        phone:
          type: string
          pattern: '^(\\+62|62|0)[8-9][0-9]{7,11}$'
          maxLength: 20
          description: Indonesian phone number format
        sex:
          type: string
          enum: [MALE, FEMALE]
          description: User gender

    ApproveUserRequest:
      type: object
      required:
        - roleId
      properties:
        roleId:
          type: string
          minLength: 1
          description: Role ID to assign to user

    UsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
        message:
          type: string

    # Product schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Product unique identifier
        name:
          type: string
          maxLength: 100
          description: Product name
        barcode:
          type: string
          maxLength: 50
          description: Product barcode
        description:
          type: string
          description: Product description
        unit:
          type: string
          maxLength: 20
          default: pcs
          description: Unit of measurement
        sellingPrice:
          type: integer
          minimum: 0
          description: Selling price in rupiah
        isPerishable:
          type: boolean
          default: false
          description: Whether product can expire
        isActive:
          type: boolean
          default: true
          description: Whether product is active
        createdAt:
          type: string
          format: date-time
          description: Product creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Product last update timestamp
        category:
          type: object
          properties:
            id:
              type: string
              description: Category ID
            name:
              type: string
              maxLength: 100
              description: Category name
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        batches:
          type: array
          items:
            $ref: "#/components/schemas/ProductBatch"
        totalQuantity:
          type: integer
          description: Total quantity across all batches

    CreateProductRequest:
      oneOf:
        - $ref: "#/components/schemas/ProductCreateSingle"
        - type: array
          items:
            $ref: "#/components/schemas/ProductCreateSingle"
          minItems: 1
          maxItems: 50
          description: Array of products for bulk creation

    ProductCreateSingle:
      type: object
      required:
        - name
        - sellingPrice
        - costPrice
        - quantity
      properties:
        name:
          type: string
          minLength: 1
          description: Product name
        barcode:
          type: string
          description: Product barcode
        description:
          type: string
          description: Product description
        unit:
          type: string
          default: pcs
          description: Unit of measurement
        sellingPrice:
          type: integer
          minimum: 0
          description: Selling price must be positive integer
        costPrice:
          type: integer
          minimum: 0
          description: Cost price must be positive integer
        categoryId:
          type: string
          description: Category ID (CUID format)
        quantity:
          type: integer
          minimum: 1
          description: Initial stock quantity
        receivedAt:
          type: string
          format: date-time
          description: When stock was received (defaults to now)
        expiredAt:
          type: string
          format: date-time
          description: Expiration date (required if perishable)
        movementNote:
          type: string
          description: Note for stock movement
        isPerishable:
          type: boolean
          default: false
          description: Whether product can expire

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: Product name
        description:
          type: string
          description: Product description
        unit:
          type: string
          description: Unit of measurement
        sellingPrice:
          type: integer
          minimum: 0
          description: Selling price as positive integer
        isPerishable:
          type: boolean
          description: Whether product can expire
        isActive:
          type: boolean
          description: Whether product is active
        categoryId:
          type: string
          description: Category ID (CUID format)

    ProductBatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Batch unique identifier
        quantity:
          type: integer
          minimum: 0
          description: Quantity in this batch
        costPrice:
          type: integer
          minimum: 0
          description: Cost price per unit in rupiah
        status:
          type: string
          enum: [AVAILABLE, EXPIRED, SOLD_OUT]
          default: AVAILABLE
          description: Batch status
        receivedAt:
          type: string
          format: date-time
          description: When batch was received
        expiredAt:
          type: string
          format: date-time
          description: Batch expiration date
        createdAt:
          type: string
          format: date-time
          description: Batch creation timestamp

    UpdateProductBatchRequest:
      type: object
      properties:
        status:
          type: string
          enum: [AVAILABLE, EXPIRED, SOLD_OUT]
          description: Batch status
        quantity:
          type: integer
          minimum: 0
          description: Quantity in batch
        costPrice:
          type: integer
          minimum: 0
          description: Cost price per unit
        receivedAt:
          type: string
          format: date-time
          description: When batch was received
        expiredAt:
          type: string
          format: date-time
          description: Batch expiration date
        notes:
          type: string
          description: Additional notes

    AddProductStockRequest:
      type: object
      required:
        - quantity
        - costPrice
      properties:
        quantity:
          type: integer
          minimum: 1
          description: Quantity to add
        costPrice:
          type: integer
          minimum: 0
          description: Cost price per unit
        receivedAt:
          type: string
          format: date-time
          description: When stock was received (defaults to now)
        expiredAt:
          type: string
          format: date-time
          description: Expiration date
        note:
          type: string
          description: Note for stock movement

    ProductsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
        message:
          type: string

    # Category schemas
    Category:
      type: object
      properties:
        id:
          type: string
          description: Category unique identifier (CUID format)
        name:
          type: string
          maxLength: 100
          description: Category name
        description:
          type: string
          description: Category description
        createdAt:
          type: string
          format: date-time
          description: Category creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Category last update timestamp
        image:
          $ref: "#/components/schemas/Image"
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Product ID
              name:
                type: string
                maxLength: 100
                description: Product name

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Category name
        description:
          type: string
          description: Category description

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Category name
        description:
          type: string
          description: Category description

    CategoriesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
        message:
          type: string

    # Stock Movement schemas
    CommitSalesRequest:
      type: object
      required:
        - sales
      properties:
        sales:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - productId
              - quantity
            properties:
              productId:
                type: string
                format: uuid
                description: Product ID to sell
              quantity:
                type: integer
                minimum: 1
                description: Quantity to sell
        note:
          type: string
          description: Optional note for the sales transaction

    StockMovement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Stock movement unique identifier
        quantity:
          type: integer
          description: Quantity moved
        movementType:
          type: string
          enum: [IN, OUT, ADJUSTMENT]
          description: Type of stock movement
        note:
          type: string
          description: Movement note
        createdAt:
          type: string
          format: date-time
          description: Movement timestamp
        product:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Product ID
            name:
              type: string
              maxLength: 100
              description: Product name
            barcode:
              type: string
              maxLength: 50
              description: Product barcode
        productBatch:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Batch ID
            expiredAt:
              type: string
              format: date-time
              description: Batch expiration date
            status:
              type: string
              enum: [AVAILABLE, EXPIRED, SOLD_OUT]
              description: Batch status

    # Image schema
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Image unique identifier
        url:
          type: string
          maxLength: 255
          description: Image URL
        thumbnailUrl:
          type: string
          maxLength: 255
          description: Thumbnail image URL
        altText:
          type: string
          maxLength: 255
          description: Image alt text
        createdAt:
          type: string
          format: date-time
          description: Image upload timestamp

    # Audit log schema
    AuditLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Audit log unique identifier
        action:
          type: string
          enum: [CREATE, UPDATE, DELETE, LOGIN, LOGOUT, OTHER]
          description: Action performed
        entity:
          type: string
          maxLength: 100
          description: Type of entity affected (User, Product, Category, etc.)
        entityId:
          type: string
          maxLength: 100
          description: ID of the affected entity
        oldValues:
          type: object
          description: Previous values before change
        newValues:
          type: object
          description: New values after change
        createdAt:
          type: string
          format: date-time
          description: Log timestamp
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: User ID who performed the action
            name:
              type: string
              maxLength: 100
              description: User name
            email:
              type: string
              format: email
              maxLength: 100
              description: User email

    # Role schema
    Role:
      type: object
      properties:
        id:
          type: string
          description: Role unique identifier (CUID format)
        name:
          type: string
          maxLength: 50
          description: Role name
        createdAt:
          type: string
          format: date-time
          description: Role creation timestamp
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/AccessPermission"
          description: Associated permissions

    # Access permission schema
    AccessPermission:
      type: object
      properties:
        id:
          type: string
          description: Permission unique identifier (CUID format)
        accessKey:
          type: string
          description: Permission key (e.g., user:read, product:manage)
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Role ID
              name:
                type: string
                maxLength: 50
                description: Role name
          description: Associated roles

    # Query parameters
    PaginationQuery:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
        search:
          type: string
          description: Search query string

paths:
  # ========================================================================================
  # AUTHENTICATION ENDPOINTS
  # ========================================================================================
  # Authentication endpoints come first as they are foundational for API access

  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user account with optional profile image upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  description: User full name
                email:
                  type: string
                  format: email
                  maxLength: 100
                  description: User email address
                password:
                  type: string
                  minLength: 6
                  maxLength: 100
                  description: User password
                phone:
                  type: string
                  pattern: '^(\\+62|62|0)[8-9][0-9]{7,11}$'
                  maxLength: 20
                  description: Indonesian phone number format
                sex:
                  type: string
                  enum: [MALE, FEMALE]
                  description: User gender
                image:
                  type: string
                  format: binary
                  description: Profile image file
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
                      accessToken:
                        type: string
                        description: JWT access token
                  message:
                    type: string
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and return access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        description: JWT access token
                  message:
                    type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generate new access token using refresh token
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        "401":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate current session
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ========================================================================================
  # RESOURCE ENDPOINTS (Alphabetical Order)
  # ========================================================================================
  # Main resource endpoints are ordered alphabetically for better discoverability
  # CRUD operations follow consistent order: GET collection, POST create, GET by ID, PUT/PATCH update, DELETE

  # ACCESS PERMISSIONS RESOURCE
  /access-permissions:
    get:
      summary: List access permissions
      description: Get list of all access permissions (requires user:read permission)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Access permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AccessPermission"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /access-permissions/{id}:
    get:
      summary: Get access permission by ID
      description: Get a specific access permission by ID (requires user:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
          description: Access Permission ID
      responses:
        "200":
          description: Access permission retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/AccessPermission"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Access permission not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # AUDIT LOGS RESOURCE
  /audit-logs:
    get:
      summary: List audit logs
      description: Get paginated list of audit logs (requires user:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by user ID
        - name: action
          in: query
          schema:
            type: string
          description: Filter by action type
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
          description: Filter from start date
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
          description: Filter to end date
      responses:
        "200":
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuditLog"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # CATEGORIES RESOURCE
  /categories:
    get:
      summary: List categories
      description: Get paginated list of categories (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesListResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create category
      description: Create a new category with optional image (requires product:manage permission)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Category name
                description:
                  type: string
                  description: Category description
                image:
                  type: string
                  format: binary
                  description: Category image file
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                  message:
                    type: string
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /categories/{id}:
    get:
      summary: Get category by ID
      description: Get detailed category information (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                  message:
                    type: string
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update category
      description: Update an existing category with optional image (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Category name
                description:
                  type: string
                  description: Category description
                isDeleted:
                  type: boolean
                  default: false
                  description: Category is deleted
                image:
                  type: string
                  format: binary
                  description: Category image file
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
                  message:
                    type: string
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete category
      description: Soft delete a category (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Categories nested/sub-resource endpoints
  /categories/{id}/image:
    put:
      summary: Upload category image
      description: Upload image for a category (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Category image file
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get category image
      description: Get image for a category (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Image retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: Category or image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete category image
      description: Delete image for a category (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: cuid
      responses:
        "200":
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: Category or image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # PRODUCTS RESOURCE
  /products:
    get:
      summary: List products
      description: Get paginated list of products (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsListResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create product
      description: Create a new product or multiple products with optional images (requires product:manage permission). Supports both single product object and array of products for bulk creation.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  description: Product name (required for single product)
                barcode:
                  type: string
                  description: Product barcode
                description:
                  type: string
                  description: Product description
                unit:
                  type: string
                  default: pcs
                  description: Unit of measurement
                sellingPrice:
                  oneOf:
                    - type: string
                    - type: integer
                  description: Selling price (must be positive)
                costPrice:
                  oneOf:
                    - type: string
                    - type: integer
                  description: Cost price (must be positive)
                categoryId:
                  type: string
                  description: Category ID (CUID format)
                quantity:
                  type: integer
                  minimum: 1
                  description: Initial stock quantity
                receivedAt:
                  type: string
                  format: date-time
                  description: When stock was received
                expiredAt:
                  type: string
                  format: date-time
                  description: Expiration date (required if perishable)
                movementNote:
                  type: string
                  description: Note for stock movement
                isPerishable:
                  type: boolean
                  default: false
                  description: Whether product can expire
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                  description: Product images (max 5 files)
      responses:
        "201":
          description: Product(s) created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: "#/components/schemas/Product"
                      - type: array
                        items:
                          $ref: "#/components/schemas/Product"
                  message:
                    type: string
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products/{id}:
    get:
      summary: Get product by ID
      description: Get detailed product information (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update product
      description: Update product information (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequest"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Products nested/sub-resource endpoints
  /products/{id}/images:
    post:
      summary: Upload product images
      description: Upload additional images for a product (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                  description: Product images (max 5 files)
      responses:
        "200":
          description: Images uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get product images
      description: Get all images for a product (requires product:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Images retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update product images partially
      description: Update product images by adding new ones and removing specific existing ones (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 5
                  description: New images to add
                removeImageIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: IDs of existing images to remove
      responses:
        "200":
          description: Images updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      added:
                        type: array
                        items:
                          $ref: "#/components/schemas/Image"
                      removed:
                        type: array
                        items:
                          $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products/{productId}/images/{imgId}:
    delete:
      summary: Delete product image
      description: Delete a specific image for a product (requires product:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: imgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products/{id}/batches:
    get:
      summary: Get product batches
      description: Get all batches for a specific product (requires inventory:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product batches retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductBatch"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products/{productId}/batches/{batchId}:
    patch:
      summary: Update product batch
      description: Update a specific product batch (requires inventory:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: batchId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductBatchRequest"
      responses:
        "200":
          description: Batch updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProductBatch"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products/{id}/stock:
    post:
      summary: Add product stock
      description: Add stock to an existing product (requires inventory:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddProductStockRequest"
      responses:
        "200":
          description: Stock added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProductBatch"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # ROLES RESOURCE
  /roles:
    get:
      summary: List roles
      description: Get list of all roles (requires user:read permission)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Role"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /roles/{id}:
    get:
      summary: Get role by ID
      description: Get a specific role by ID (requires user:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Role ID
      responses:
        "200":
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Role"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Role not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # STOCK MOVEMENTS RESOURCE
  /stock-movements:
    get:
      summary: List stock movements
      description: Get paginated list of stock movements with optional filtering (requires inventory:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: productId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by product ID
        - name: movementType
          in: query
          schema:
            type: string
            enum: [IN, OUT, ADJUSTMENT]
          description: Filter by movement type
      responses:
        "200":
          description: Stock movements retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StockMovement"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # SALES RESOURCE
  /sales/commit:
    post:
      summary: Commit sales transaction
      description: Process multiple product sales in a single transaction (requires inventory:manage permission)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitSalesRequest"
      responses:
        "201":
          description: Sales committed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/StockMovement"
                  message:
                    type: string
        "400":
          description: Validation error or insufficient stock
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # USERS RESOURCE
  /users:
    get:
      summary: List users
      description: Get paginated list of users (requires user:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponse"
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/me:
    get:
      summary: Get current user profile
      description: Get current authenticated user's profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
    patch:
      summary: Update current user profile
      description: Update current authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    get:
      summary: Get user by ID
      description: Get user details by ID (requires user:read permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Users nested/sub-resource endpoints
  /users/me/image:
    put:
      summary: Upload current user profile image
      description: Upload profile image for the current authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Profile image file
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      image:
                        $ref: "#/components/schemas/Image"
                      user:
                        $ref: "#/components/schemas/User"
                      prevImage:
                        $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get current user profile image
      description: Get profile image for the current authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Image retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: User or image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete current user profile image
      description: Delete profile image for the current authenticated user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Image"
                  message:
                    type: string
        "404":
          description: User or image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}/approve:
    patch:
      summary: Approve user account
      description: Approve a user account and assign role (requires user:manage permission)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApproveUserRequest"
      responses:
        "200":
          description: User approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                  message:
                    type: string
        "403":
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
